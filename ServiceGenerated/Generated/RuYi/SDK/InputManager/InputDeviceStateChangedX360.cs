/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.InputManager
{

  public partial class InputDeviceStateChangedX360 : TBase
  {
    private long _PacketNumber;
    private string _DeviceId;
    private short _LeftThumbDeadZone;
    private short _RightThumbDeadZone;
    private int _Buttons;
    private sbyte _LeftTrigger;
    private sbyte _RightTrigger;
    private short _LeftThumbX;
    private short _LeftThumbY;
    private short _RightThumbX;
    private short _RightThumbY;
    private RuyiInputStateChanged _Changed;

    public long PacketNumber
    {
      get
      {
        return _PacketNumber;
      }
      set
      {
        __isset.PacketNumber = true;
        this._PacketNumber = value;
      }
    }

    public string DeviceId
    {
      get
      {
        return _DeviceId;
      }
      set
      {
        __isset.DeviceId = true;
        this._DeviceId = value;
      }
    }

    public short LeftThumbDeadZone
    {
      get
      {
        return _LeftThumbDeadZone;
      }
      set
      {
        __isset.LeftThumbDeadZone = true;
        this._LeftThumbDeadZone = value;
      }
    }

    public short RightThumbDeadZone
    {
      get
      {
        return _RightThumbDeadZone;
      }
      set
      {
        __isset.RightThumbDeadZone = true;
        this._RightThumbDeadZone = value;
      }
    }

    public int Buttons
    {
      get
      {
        return _Buttons;
      }
      set
      {
        __isset.Buttons = true;
        this._Buttons = value;
      }
    }

    public sbyte LeftTrigger
    {
      get
      {
        return _LeftTrigger;
      }
      set
      {
        __isset.LeftTrigger = true;
        this._LeftTrigger = value;
      }
    }

    public sbyte RightTrigger
    {
      get
      {
        return _RightTrigger;
      }
      set
      {
        __isset.RightTrigger = true;
        this._RightTrigger = value;
      }
    }

    public short LeftThumbX
    {
      get
      {
        return _LeftThumbX;
      }
      set
      {
        __isset.LeftThumbX = true;
        this._LeftThumbX = value;
      }
    }

    public short LeftThumbY
    {
      get
      {
        return _LeftThumbY;
      }
      set
      {
        __isset.LeftThumbY = true;
        this._LeftThumbY = value;
      }
    }

    public short RightThumbX
    {
      get
      {
        return _RightThumbX;
      }
      set
      {
        __isset.RightThumbX = true;
        this._RightThumbX = value;
      }
    }

    public short RightThumbY
    {
      get
      {
        return _RightThumbY;
      }
      set
      {
        __isset.RightThumbY = true;
        this._RightThumbY = value;
      }
    }

    public RuyiInputStateChanged Changed
    {
      get
      {
        return _Changed;
      }
      set
      {
        __isset.Changed = true;
        this._Changed = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool PacketNumber;
      public bool DeviceId;
      public bool LeftThumbDeadZone;
      public bool RightThumbDeadZone;
      public bool Buttons;
      public bool LeftTrigger;
      public bool RightTrigger;
      public bool LeftThumbX;
      public bool LeftThumbY;
      public bool RightThumbX;
      public bool RightThumbY;
      public bool Changed;
    }

    public InputDeviceStateChangedX360()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                PacketNumber = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                DeviceId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I16)
              {
                LeftThumbDeadZone = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I16)
              {
                RightThumbDeadZone = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                Buttons = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Byte)
              {
                LeftTrigger = await iprot.ReadByteAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Byte)
              {
                RightTrigger = await iprot.ReadByteAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I16)
              {
                LeftThumbX = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.I16)
              {
                LeftThumbY = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.I16)
              {
                RightThumbX = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.I16)
              {
                RightThumbY = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.Struct)
              {
                Changed = new RuyiInputStateChanged();
                await Changed.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("InputDeviceStateChangedX360");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.PacketNumber)
        {
          field.Name = "PacketNumber";
          field.Type = TType.I64;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(PacketNumber, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DeviceId != null && __isset.DeviceId)
        {
          field.Name = "DeviceId";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(DeviceId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.LeftThumbDeadZone)
        {
          field.Name = "LeftThumbDeadZone";
          field.Type = TType.I16;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(LeftThumbDeadZone, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.RightThumbDeadZone)
        {
          field.Name = "RightThumbDeadZone";
          field.Type = TType.I16;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(RightThumbDeadZone, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.Buttons)
        {
          field.Name = "Buttons";
          field.Type = TType.I32;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Buttons, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.LeftTrigger)
        {
          field.Name = "LeftTrigger";
          field.Type = TType.Byte;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteByteAsync(LeftTrigger, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.RightTrigger)
        {
          field.Name = "RightTrigger";
          field.Type = TType.Byte;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteByteAsync(RightTrigger, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.LeftThumbX)
        {
          field.Name = "LeftThumbX";
          field.Type = TType.I16;
          field.ID = 8;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(LeftThumbX, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.LeftThumbY)
        {
          field.Name = "LeftThumbY";
          field.Type = TType.I16;
          field.ID = 9;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(LeftThumbY, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.RightThumbX)
        {
          field.Name = "RightThumbX";
          field.Type = TType.I16;
          field.ID = 10;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(RightThumbX, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.RightThumbY)
        {
          field.Name = "RightThumbY";
          field.Type = TType.I16;
          field.ID = 11;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(RightThumbY, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Changed != null && __isset.Changed)
        {
          field.Name = "Changed";
          field.Type = TType.Struct;
          field.ID = 12;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Changed.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("InputDeviceStateChangedX360(");
      bool __first = true;
      if (__isset.PacketNumber)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("PacketNumber: ");
        sb.Append(PacketNumber);
      }
      if (DeviceId != null && __isset.DeviceId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DeviceId: ");
        sb.Append(DeviceId);
      }
      if (__isset.LeftThumbDeadZone)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("LeftThumbDeadZone: ");
        sb.Append(LeftThumbDeadZone);
      }
      if (__isset.RightThumbDeadZone)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RightThumbDeadZone: ");
        sb.Append(RightThumbDeadZone);
      }
      if (__isset.Buttons)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Buttons: ");
        sb.Append(Buttons);
      }
      if (__isset.LeftTrigger)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("LeftTrigger: ");
        sb.Append(LeftTrigger);
      }
      if (__isset.RightTrigger)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RightTrigger: ");
        sb.Append(RightTrigger);
      }
      if (__isset.LeftThumbX)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("LeftThumbX: ");
        sb.Append(LeftThumbX);
      }
      if (__isset.LeftThumbY)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("LeftThumbY: ");
        sb.Append(LeftThumbY);
      }
      if (__isset.RightThumbX)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RightThumbX: ");
        sb.Append(RightThumbX);
      }
      if (__isset.RightThumbY)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RightThumbY: ");
        sb.Append(RightThumbY);
      }
      if (Changed != null && __isset.Changed)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Changed: ");
        sb.Append(Changed== null ? "<null>" : Changed.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
