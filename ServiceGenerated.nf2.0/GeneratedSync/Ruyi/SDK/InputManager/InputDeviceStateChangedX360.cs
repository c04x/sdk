/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ruyi.SDK.InputManager
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class InputDeviceStateChangedX360 : TBase
  {
    private long _PacketNumber;
    private short _LeftThumbDeadZone;
    private short _RightThumbDeadZone;
    private int _Buttons;
    private sbyte _LeftTrigger;
    private sbyte _RightTrigger;
    private short _LeftThumbX;
    private short _LeftThumbY;
    private short _RightThumbX;
    private short _RightThumbY;

    public long PacketNumber
    {
      get
      {
        return _PacketNumber;
      }
      set
      {
        __isset.PacketNumber = true;
        this._PacketNumber = value;
      }
    }

    public short LeftThumbDeadZone
    {
      get
      {
        return _LeftThumbDeadZone;
      }
      set
      {
        __isset.LeftThumbDeadZone = true;
        this._LeftThumbDeadZone = value;
      }
    }

    public short RightThumbDeadZone
    {
      get
      {
        return _RightThumbDeadZone;
      }
      set
      {
        __isset.RightThumbDeadZone = true;
        this._RightThumbDeadZone = value;
      }
    }

    public int Buttons
    {
      get
      {
        return _Buttons;
      }
      set
      {
        __isset.Buttons = true;
        this._Buttons = value;
      }
    }

    public sbyte LeftTrigger
    {
      get
      {
        return _LeftTrigger;
      }
      set
      {
        __isset.LeftTrigger = true;
        this._LeftTrigger = value;
      }
    }

    public sbyte RightTrigger
    {
      get
      {
        return _RightTrigger;
      }
      set
      {
        __isset.RightTrigger = true;
        this._RightTrigger = value;
      }
    }

    public short LeftThumbX
    {
      get
      {
        return _LeftThumbX;
      }
      set
      {
        __isset.LeftThumbX = true;
        this._LeftThumbX = value;
      }
    }

    public short LeftThumbY
    {
      get
      {
        return _LeftThumbY;
      }
      set
      {
        __isset.LeftThumbY = true;
        this._LeftThumbY = value;
      }
    }

    public short RightThumbX
    {
      get
      {
        return _RightThumbX;
      }
      set
      {
        __isset.RightThumbX = true;
        this._RightThumbX = value;
      }
    }

    public short RightThumbY
    {
      get
      {
        return _RightThumbY;
      }
      set
      {
        __isset.RightThumbY = true;
        this._RightThumbY = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool PacketNumber;
      public bool LeftThumbDeadZone;
      public bool RightThumbDeadZone;
      public bool Buttons;
      public bool LeftTrigger;
      public bool RightTrigger;
      public bool LeftThumbX;
      public bool LeftThumbY;
      public bool RightThumbX;
      public bool RightThumbY;
    }

    public InputDeviceStateChangedX360() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                PacketNumber = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I16) {
                LeftThumbDeadZone = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I16) {
                RightThumbDeadZone = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Buttons = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Byte) {
                LeftTrigger = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Byte) {
                RightTrigger = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I16) {
                LeftThumbX = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I16) {
                LeftThumbY = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I16) {
                RightThumbX = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I16) {
                RightThumbY = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("InputDeviceStateChangedX360");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.PacketNumber) {
          field.Name = "PacketNumber";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(PacketNumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.LeftThumbDeadZone) {
          field.Name = "LeftThumbDeadZone";
          field.Type = TType.I16;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(LeftThumbDeadZone);
          oprot.WriteFieldEnd();
        }
        if (__isset.RightThumbDeadZone) {
          field.Name = "RightThumbDeadZone";
          field.Type = TType.I16;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(RightThumbDeadZone);
          oprot.WriteFieldEnd();
        }
        if (__isset.Buttons) {
          field.Name = "Buttons";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Buttons);
          oprot.WriteFieldEnd();
        }
        if (__isset.LeftTrigger) {
          field.Name = "LeftTrigger";
          field.Type = TType.Byte;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(LeftTrigger);
          oprot.WriteFieldEnd();
        }
        if (__isset.RightTrigger) {
          field.Name = "RightTrigger";
          field.Type = TType.Byte;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(RightTrigger);
          oprot.WriteFieldEnd();
        }
        if (__isset.LeftThumbX) {
          field.Name = "LeftThumbX";
          field.Type = TType.I16;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(LeftThumbX);
          oprot.WriteFieldEnd();
        }
        if (__isset.LeftThumbY) {
          field.Name = "LeftThumbY";
          field.Type = TType.I16;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(LeftThumbY);
          oprot.WriteFieldEnd();
        }
        if (__isset.RightThumbX) {
          field.Name = "RightThumbX";
          field.Type = TType.I16;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(RightThumbX);
          oprot.WriteFieldEnd();
        }
        if (__isset.RightThumbY) {
          field.Name = "RightThumbY";
          field.Type = TType.I16;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(RightThumbY);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("InputDeviceStateChangedX360(");
      bool __first = true;
      if (__isset.PacketNumber) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PacketNumber: ");
        __sb.Append(PacketNumber);
      }
      if (__isset.LeftThumbDeadZone) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LeftThumbDeadZone: ");
        __sb.Append(LeftThumbDeadZone);
      }
      if (__isset.RightThumbDeadZone) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RightThumbDeadZone: ");
        __sb.Append(RightThumbDeadZone);
      }
      if (__isset.Buttons) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Buttons: ");
        __sb.Append(Buttons);
      }
      if (__isset.LeftTrigger) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LeftTrigger: ");
        __sb.Append(LeftTrigger);
      }
      if (__isset.RightTrigger) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RightTrigger: ");
        __sb.Append(RightTrigger);
      }
      if (__isset.LeftThumbX) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LeftThumbX: ");
        __sb.Append(LeftThumbX);
      }
      if (__isset.LeftThumbY) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LeftThumbY: ");
        __sb.Append(LeftThumbY);
      }
      if (__isset.RightThumbX) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RightThumbX: ");
        __sb.Append(RightThumbX);
      }
      if (__isset.RightThumbY) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RightThumbY: ");
        __sb.Append(RightThumbY);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
