/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "SettingSystemSDKDataTypes_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Ruyi { namespace SDK { namespace SettingSystem { namespace Api {

int _kNodeTypeValues[] = {
  NodeType::Category,
  NodeType::SettingItem,
  NodeType::All
};
const char* _kNodeTypeNames[] = {
  "Category",
  "SettingItem",
  "All"
};
const std::map<int, const char*> _NodeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kNodeTypeValues, _kNodeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const NodeType::type& val) {
  std::map<int, const char*>::const_iterator it = _NodeType_VALUES_TO_NAMES.find(val);
  if (it != _NodeType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


RuyiNetworkSettingNameValue::~RuyiNetworkSettingNameValue() throw() {
}


void RuyiNetworkSettingNameValue::__set_name(const std::string& val) {
  this->name = val;
}

void RuyiNetworkSettingNameValue::__set_value(const std::string& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const RuyiNetworkSettingNameValue& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RuyiNetworkSettingNameValue::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiNetworkSettingNameValue::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiNetworkSettingNameValue");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiNetworkSettingNameValue &a, RuyiNetworkSettingNameValue &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

RuyiNetworkSettingNameValue::RuyiNetworkSettingNameValue(const RuyiNetworkSettingNameValue& other0) {
  name = other0.name;
  value = other0.value;
  __isset = other0.__isset;
}
RuyiNetworkSettingNameValue& RuyiNetworkSettingNameValue::operator=(const RuyiNetworkSettingNameValue& other1) {
  name = other1.name;
  value = other1.value;
  __isset = other1.__isset;
  return *this;
}
void RuyiNetworkSettingNameValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiNetworkSettingNameValue(";
  out << "name=" << to_string(name);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


RuyiNetworkSettings::~RuyiNetworkSettings() throw() {
}


void RuyiNetworkSettings::__set_connection(const RuyiNetworkSettingNameValue& val) {
  this->connection = val;
}

void RuyiNetworkSettings::__set_networkType(const RuyiNetworkSettingNameValue& val) {
  this->networkType = val;
}

void RuyiNetworkSettings::__set_quality(const RuyiNetworkSettingNameValue& val) {
  this->quality = val;
}

void RuyiNetworkSettings::__set_SSID(const RuyiNetworkSettingNameValue& val) {
  this->SSID = val;
}

void RuyiNetworkSettings::__set_BSSID(const RuyiNetworkSettingNameValue& val) {
  this->BSSID = val;
}

void RuyiNetworkSettings::__set_Authentication(const RuyiNetworkSettingNameValue& val) {
  this->Authentication = val;
}

void RuyiNetworkSettings::__set_DHCPEnabled(const RuyiNetworkSettingNameValue& val) {
  this->DHCPEnabled = val;
}

void RuyiNetworkSettings::__set_IpAddress(const RuyiNetworkSettingNameValue& val) {
  this->IpAddress = val;
}

void RuyiNetworkSettings::__set_SubMask(const RuyiNetworkSettingNameValue& val) {
  this->SubMask = val;
}

void RuyiNetworkSettings::__set_Gateway(const RuyiNetworkSettingNameValue& val) {
  this->Gateway = val;
}

void RuyiNetworkSettings::__set_MainDNS(const RuyiNetworkSettingNameValue& val) {
  this->MainDNS = val;
}

void RuyiNetworkSettings::__set_SubDNS(const RuyiNetworkSettingNameValue& val) {
  this->SubDNS = val;
}

void RuyiNetworkSettings::__set_MacAddress(const RuyiNetworkSettingNameValue& val) {
  this->MacAddress = val;
}

void RuyiNetworkSettings::__set_Proxy(const RuyiNetworkSettingNameValue& val) {
  this->Proxy = val;
}
std::ostream& operator<<(std::ostream& out, const RuyiNetworkSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RuyiNetworkSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->connection.read(iprot);
          this->__isset.connection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->networkType.read(iprot);
          this->__isset.networkType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->quality.read(iprot);
          this->__isset.quality = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->SSID.read(iprot);
          this->__isset.SSID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->BSSID.read(iprot);
          this->__isset.BSSID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Authentication.read(iprot);
          this->__isset.Authentication = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->DHCPEnabled.read(iprot);
          this->__isset.DHCPEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->IpAddress.read(iprot);
          this->__isset.IpAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->SubMask.read(iprot);
          this->__isset.SubMask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Gateway.read(iprot);
          this->__isset.Gateway = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->MainDNS.read(iprot);
          this->__isset.MainDNS = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->SubDNS.read(iprot);
          this->__isset.SubDNS = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->MacAddress.read(iprot);
          this->__isset.MacAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Proxy.read(iprot);
          this->__isset.Proxy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiNetworkSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiNetworkSettings");

  xfer += oprot->writeFieldBegin("connection", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->connection.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("networkType", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->networkType.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("quality", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->quality.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SSID", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->SSID.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BSSID", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->BSSID.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Authentication", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->Authentication.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DHCPEnabled", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->DHCPEnabled.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IpAddress", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->IpAddress.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubMask", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->SubMask.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Gateway", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->Gateway.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MainDNS", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->MainDNS.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubDNS", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->SubDNS.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MacAddress", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->MacAddress.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Proxy", ::apache::thrift::protocol::T_STRUCT, 14);
  xfer += this->Proxy.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiNetworkSettings &a, RuyiNetworkSettings &b) {
  using ::std::swap;
  swap(a.connection, b.connection);
  swap(a.networkType, b.networkType);
  swap(a.quality, b.quality);
  swap(a.SSID, b.SSID);
  swap(a.BSSID, b.BSSID);
  swap(a.Authentication, b.Authentication);
  swap(a.DHCPEnabled, b.DHCPEnabled);
  swap(a.IpAddress, b.IpAddress);
  swap(a.SubMask, b.SubMask);
  swap(a.Gateway, b.Gateway);
  swap(a.MainDNS, b.MainDNS);
  swap(a.SubDNS, b.SubDNS);
  swap(a.MacAddress, b.MacAddress);
  swap(a.Proxy, b.Proxy);
  swap(a.__isset, b.__isset);
}

RuyiNetworkSettings::RuyiNetworkSettings(const RuyiNetworkSettings& other2) {
  connection = other2.connection;
  networkType = other2.networkType;
  quality = other2.quality;
  SSID = other2.SSID;
  BSSID = other2.BSSID;
  Authentication = other2.Authentication;
  DHCPEnabled = other2.DHCPEnabled;
  IpAddress = other2.IpAddress;
  SubMask = other2.SubMask;
  Gateway = other2.Gateway;
  MainDNS = other2.MainDNS;
  SubDNS = other2.SubDNS;
  MacAddress = other2.MacAddress;
  Proxy = other2.Proxy;
  __isset = other2.__isset;
}
RuyiNetworkSettings& RuyiNetworkSettings::operator=(const RuyiNetworkSettings& other3) {
  connection = other3.connection;
  networkType = other3.networkType;
  quality = other3.quality;
  SSID = other3.SSID;
  BSSID = other3.BSSID;
  Authentication = other3.Authentication;
  DHCPEnabled = other3.DHCPEnabled;
  IpAddress = other3.IpAddress;
  SubMask = other3.SubMask;
  Gateway = other3.Gateway;
  MainDNS = other3.MainDNS;
  SubDNS = other3.SubDNS;
  MacAddress = other3.MacAddress;
  Proxy = other3.Proxy;
  __isset = other3.__isset;
  return *this;
}
void RuyiNetworkSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiNetworkSettings(";
  out << "connection=" << to_string(connection);
  out << ", " << "networkType=" << to_string(networkType);
  out << ", " << "quality=" << to_string(quality);
  out << ", " << "SSID=" << to_string(SSID);
  out << ", " << "BSSID=" << to_string(BSSID);
  out << ", " << "Authentication=" << to_string(Authentication);
  out << ", " << "DHCPEnabled=" << to_string(DHCPEnabled);
  out << ", " << "IpAddress=" << to_string(IpAddress);
  out << ", " << "SubMask=" << to_string(SubMask);
  out << ", " << "Gateway=" << to_string(Gateway);
  out << ", " << "MainDNS=" << to_string(MainDNS);
  out << ", " << "SubDNS=" << to_string(SubDNS);
  out << ", " << "MacAddress=" << to_string(MacAddress);
  out << ", " << "Proxy=" << to_string(Proxy);
  out << ")";
}


CategoryNode::~CategoryNode() throw() {
}


void CategoryNode::__set_id(const std::string& val) {
  this->id = val;
}

void CategoryNode::__set_categoryId(const std::string& val) {
  this->categoryId = val;
}

void CategoryNode::__set_sortingPriority(const int32_t val) {
  this->sortingPriority = val;
}

void CategoryNode::__set_children(const std::vector<CategoryNode> & val) {
  this->children = val;
}
std::ostream& operator<<(std::ostream& out, const CategoryNode& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CategoryNode::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->categoryId);
          this->__isset.categoryId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sortingPriority);
          this->__isset.sortingPriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->children.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->children.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += this->children[_i8].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.children = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CategoryNode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CategoryNode");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("categoryId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->categoryId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sortingPriority", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sortingPriority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("children", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->children.size()));
    std::vector<CategoryNode> ::const_iterator _iter9;
    for (_iter9 = this->children.begin(); _iter9 != this->children.end(); ++_iter9)
    {
      xfer += (*_iter9).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CategoryNode &a, CategoryNode &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.categoryId, b.categoryId);
  swap(a.sortingPriority, b.sortingPriority);
  swap(a.children, b.children);
  swap(a.__isset, b.__isset);
}

CategoryNode::CategoryNode(const CategoryNode& other10) {
  id = other10.id;
  categoryId = other10.categoryId;
  sortingPriority = other10.sortingPriority;
  children = other10.children;
  __isset = other10.__isset;
}
CategoryNode& CategoryNode::operator=(const CategoryNode& other11) {
  id = other11.id;
  categoryId = other11.categoryId;
  sortingPriority = other11.sortingPriority;
  children = other11.children;
  __isset = other11.__isset;
  return *this;
}
void CategoryNode::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CategoryNode(";
  out << "id=" << to_string(id);
  out << ", " << "categoryId=" << to_string(categoryId);
  out << ", " << "sortingPriority=" << to_string(sortingPriority);
  out << ", " << "children=" << to_string(children);
  out << ")";
}


SettingSearchResult::~SettingSearchResult() throw() {
}


void SettingSearchResult::__set_Version(const std::string& val) {
  this->Version = val;
}

void SettingSearchResult::__set_SettingItems(const std::vector< ::Ruyi::SDK::CommonType::SettingItem> & val) {
  this->SettingItems = val;
}
std::ostream& operator<<(std::ostream& out, const SettingSearchResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SettingSearchResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Version);
          this->__isset.Version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SettingItems.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->SettingItems.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->SettingItems[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SettingItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SettingSearchResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SettingSearchResult");

  xfer += oprot->writeFieldBegin("Version", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SettingItems", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SettingItems.size()));
    std::vector< ::Ruyi::SDK::CommonType::SettingItem> ::const_iterator _iter17;
    for (_iter17 = this->SettingItems.begin(); _iter17 != this->SettingItems.end(); ++_iter17)
    {
      xfer += (*_iter17).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SettingSearchResult &a, SettingSearchResult &b) {
  using ::std::swap;
  swap(a.Version, b.Version);
  swap(a.SettingItems, b.SettingItems);
  swap(a.__isset, b.__isset);
}

SettingSearchResult::SettingSearchResult(const SettingSearchResult& other18) {
  Version = other18.Version;
  SettingItems = other18.SettingItems;
  __isset = other18.__isset;
}
SettingSearchResult& SettingSearchResult::operator=(const SettingSearchResult& other19) {
  Version = other19.Version;
  SettingItems = other19.SettingItems;
  __isset = other19.__isset;
  return *this;
}
void SettingSearchResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SettingSearchResult(";
  out << "Version=" << to_string(Version);
  out << ", " << "SettingItems=" << to_string(SettingItems);
  out << ")";
}


SettingTree::~SettingTree() throw() {
}


void SettingTree::__set_CateNode(const CategoryNode& val) {
  this->CateNode = val;
}

void SettingTree::__set_SettingCategories(const std::map<std::string,  ::Ruyi::SDK::CommonType::SettingCategory> & val) {
  this->SettingCategories = val;
}

void SettingTree::__set_SettingItems(const std::map<std::string,  ::Ruyi::SDK::CommonType::SettingItem> & val) {
  this->SettingItems = val;
}
std::ostream& operator<<(std::ostream& out, const SettingTree& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SettingTree::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->CateNode.read(iprot);
          this->__isset.CateNode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->SettingCategories.clear();
            uint32_t _size20;
            ::apache::thrift::protocol::TType _ktype21;
            ::apache::thrift::protocol::TType _vtype22;
            xfer += iprot->readMapBegin(_ktype21, _vtype22, _size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              std::string _key25;
              xfer += iprot->readString(_key25);
               ::Ruyi::SDK::CommonType::SettingCategory& _val26 = this->SettingCategories[_key25];
              xfer += _val26.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.SettingCategories = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->SettingItems.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _ktype28;
            ::apache::thrift::protocol::TType _vtype29;
            xfer += iprot->readMapBegin(_ktype28, _vtype29, _size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              std::string _key32;
              xfer += iprot->readString(_key32);
               ::Ruyi::SDK::CommonType::SettingItem& _val33 = this->SettingItems[_key32];
              xfer += _val33.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.SettingItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SettingTree::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SettingTree");

  xfer += oprot->writeFieldBegin("CateNode", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->CateNode.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SettingCategories", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SettingCategories.size()));
    std::map<std::string,  ::Ruyi::SDK::CommonType::SettingCategory> ::const_iterator _iter34;
    for (_iter34 = this->SettingCategories.begin(); _iter34 != this->SettingCategories.end(); ++_iter34)
    {
      xfer += oprot->writeString(_iter34->first);
      xfer += _iter34->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SettingItems", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SettingItems.size()));
    std::map<std::string,  ::Ruyi::SDK::CommonType::SettingItem> ::const_iterator _iter35;
    for (_iter35 = this->SettingItems.begin(); _iter35 != this->SettingItems.end(); ++_iter35)
    {
      xfer += oprot->writeString(_iter35->first);
      xfer += _iter35->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SettingTree &a, SettingTree &b) {
  using ::std::swap;
  swap(a.CateNode, b.CateNode);
  swap(a.SettingCategories, b.SettingCategories);
  swap(a.SettingItems, b.SettingItems);
  swap(a.__isset, b.__isset);
}

SettingTree::SettingTree(const SettingTree& other36) {
  CateNode = other36.CateNode;
  SettingCategories = other36.SettingCategories;
  SettingItems = other36.SettingItems;
  __isset = other36.__isset;
}
SettingTree& SettingTree::operator=(const SettingTree& other37) {
  CateNode = other37.CateNode;
  SettingCategories = other37.SettingCategories;
  SettingItems = other37.SettingItems;
  __isset = other37.__isset;
  return *this;
}
void SettingTree::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SettingTree(";
  out << "CateNode=" << to_string(CateNode);
  out << ", " << "SettingCategories=" << to_string(SettingCategories);
  out << ", " << "SettingItems=" << to_string(SettingItems);
  out << ")";
}


NodeList::~NodeList() throw() {
}


void NodeList::__set_SettingCategories(const std::vector< ::Ruyi::SDK::CommonType::SettingCategory> & val) {
  this->SettingCategories = val;
}

void NodeList::__set_SettingItems(const std::vector< ::Ruyi::SDK::CommonType::SettingItem> & val) {
  this->SettingItems = val;
}
std::ostream& operator<<(std::ostream& out, const NodeList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t NodeList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SettingCategories.clear();
            uint32_t _size38;
            ::apache::thrift::protocol::TType _etype41;
            xfer += iprot->readListBegin(_etype41, _size38);
            this->SettingCategories.resize(_size38);
            uint32_t _i42;
            for (_i42 = 0; _i42 < _size38; ++_i42)
            {
              xfer += this->SettingCategories[_i42].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SettingCategories = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SettingItems.clear();
            uint32_t _size43;
            ::apache::thrift::protocol::TType _etype46;
            xfer += iprot->readListBegin(_etype46, _size43);
            this->SettingItems.resize(_size43);
            uint32_t _i47;
            for (_i47 = 0; _i47 < _size43; ++_i47)
            {
              xfer += this->SettingItems[_i47].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SettingItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NodeList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NodeList");

  xfer += oprot->writeFieldBegin("SettingCategories", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SettingCategories.size()));
    std::vector< ::Ruyi::SDK::CommonType::SettingCategory> ::const_iterator _iter48;
    for (_iter48 = this->SettingCategories.begin(); _iter48 != this->SettingCategories.end(); ++_iter48)
    {
      xfer += (*_iter48).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SettingItems", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SettingItems.size()));
    std::vector< ::Ruyi::SDK::CommonType::SettingItem> ::const_iterator _iter49;
    for (_iter49 = this->SettingItems.begin(); _iter49 != this->SettingItems.end(); ++_iter49)
    {
      xfer += (*_iter49).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NodeList &a, NodeList &b) {
  using ::std::swap;
  swap(a.SettingCategories, b.SettingCategories);
  swap(a.SettingItems, b.SettingItems);
  swap(a.__isset, b.__isset);
}

NodeList::NodeList(const NodeList& other50) {
  SettingCategories = other50.SettingCategories;
  SettingItems = other50.SettingItems;
  __isset = other50.__isset;
}
NodeList& NodeList::operator=(const NodeList& other51) {
  SettingCategories = other51.SettingCategories;
  SettingItems = other51.SettingItems;
  __isset = other51.__isset;
  return *this;
}
void NodeList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NodeList(";
  out << "SettingCategories=" << to_string(SettingCategories);
  out << ", " << "SettingItems=" << to_string(SettingItems);
  out << ")";
}


SettingItemNotification::~SettingItemNotification() throw() {
}


void SettingItemNotification::__set_key(const std::string& val) {
  this->key = val;
}

void SettingItemNotification::__set_contents(const JSON& val) {
  this->contents = val;
}
std::ostream& operator<<(std::ostream& out, const SettingItemNotification& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SettingItemNotification::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contents);
          this->__isset.contents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SettingItemNotification::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SettingItemNotification");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contents", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->contents);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SettingItemNotification &a, SettingItemNotification &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.contents, b.contents);
  swap(a.__isset, b.__isset);
}

SettingItemNotification::SettingItemNotification(const SettingItemNotification& other52) {
  key = other52.key;
  contents = other52.contents;
  __isset = other52.__isset;
}
SettingItemNotification& SettingItemNotification::operator=(const SettingItemNotification& other53) {
  key = other53.key;
  contents = other53.contents;
  __isset = other53.__isset;
  return *this;
}
void SettingItemNotification::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SettingItemNotification(";
  out << "key=" << to_string(key);
  out << ", " << "contents=" << to_string(contents);
  out << ")";
}

}}}} // namespace
