/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "SettingSystemSDKDataTypes_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Ruyi { namespace SDK { namespace SettingSystem { namespace Api {

int _kNodeTypeValues[] = {
  NodeType::Category,
  NodeType::SettingItem,
  NodeType::All
};
const char* _kNodeTypeNames[] = {
  "Category",
  "SettingItem",
  "All"
};
const std::map<int, const char*> _NodeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kNodeTypeValues, _kNodeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const NodeType::type& val) {
  std::map<int, const char*>::const_iterator it = _NodeType_VALUES_TO_NAMES.find(val);
  if (it != _NodeType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


RuyiNetworkSettingNameValue::~RuyiNetworkSettingNameValue() throw() {
}


void RuyiNetworkSettingNameValue::__set_name(const std::string& val) {
  this->name = val;
}

void RuyiNetworkSettingNameValue::__set_value(const std::string& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const RuyiNetworkSettingNameValue& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RuyiNetworkSettingNameValue::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiNetworkSettingNameValue::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiNetworkSettingNameValue");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiNetworkSettingNameValue &a, RuyiNetworkSettingNameValue &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

RuyiNetworkSettingNameValue::RuyiNetworkSettingNameValue(const RuyiNetworkSettingNameValue& other0) {
  name = other0.name;
  value = other0.value;
  __isset = other0.__isset;
}
RuyiNetworkSettingNameValue& RuyiNetworkSettingNameValue::operator=(const RuyiNetworkSettingNameValue& other1) {
  name = other1.name;
  value = other1.value;
  __isset = other1.__isset;
  return *this;
}
void RuyiNetworkSettingNameValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiNetworkSettingNameValue(";
  out << "name=" << to_string(name);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


RuyiNetworkTestItem::~RuyiNetworkTestItem() throw() {
}


void RuyiNetworkTestItem::__set_item(const RuyiNetworkSettingNameValue& val) {
  this->item = val;
}

void RuyiNetworkTestItem::__set_result(const bool val) {
  this->result = val;
}
std::ostream& operator<<(std::ostream& out, const RuyiNetworkTestItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RuyiNetworkTestItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->item.read(iprot);
          this->__isset.item = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiNetworkTestItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiNetworkTestItem");

  xfer += oprot->writeFieldBegin("item", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->item.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiNetworkTestItem &a, RuyiNetworkTestItem &b) {
  using ::std::swap;
  swap(a.item, b.item);
  swap(a.result, b.result);
  swap(a.__isset, b.__isset);
}

RuyiNetworkTestItem::RuyiNetworkTestItem(const RuyiNetworkTestItem& other2) {
  item = other2.item;
  result = other2.result;
  __isset = other2.__isset;
}
RuyiNetworkTestItem& RuyiNetworkTestItem::operator=(const RuyiNetworkTestItem& other3) {
  item = other3.item;
  result = other3.result;
  __isset = other3.__isset;
  return *this;
}
void RuyiNetworkTestItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiNetworkTestItem(";
  out << "item=" << to_string(item);
  out << ", " << "result=" << to_string(result);
  out << ")";
}


RuyiNetworkSettings::~RuyiNetworkSettings() throw() {
}


void RuyiNetworkSettings::__set_connection(const RuyiNetworkSettingNameValue& val) {
  this->connection = val;
}

void RuyiNetworkSettings::__set_networkType(const RuyiNetworkSettingNameValue& val) {
  this->networkType = val;
}

void RuyiNetworkSettings::__set_quality(const RuyiNetworkSettingNameValue& val) {
  this->quality = val;
}

void RuyiNetworkSettings::__set_SSID(const RuyiNetworkSettingNameValue& val) {
  this->SSID = val;
}

void RuyiNetworkSettings::__set_BSSID(const RuyiNetworkSettingNameValue& val) {
  this->BSSID = val;
}

void RuyiNetworkSettings::__set_Authentication(const RuyiNetworkSettingNameValue& val) {
  this->Authentication = val;
}

void RuyiNetworkSettings::__set_DHCPEnabled(const RuyiNetworkSettingNameValue& val) {
  this->DHCPEnabled = val;
}

void RuyiNetworkSettings::__set_IpAddress(const RuyiNetworkSettingNameValue& val) {
  this->IpAddress = val;
}

void RuyiNetworkSettings::__set_SubMask(const RuyiNetworkSettingNameValue& val) {
  this->SubMask = val;
}

void RuyiNetworkSettings::__set_Gateway(const RuyiNetworkSettingNameValue& val) {
  this->Gateway = val;
}

void RuyiNetworkSettings::__set_MainDNS(const RuyiNetworkSettingNameValue& val) {
  this->MainDNS = val;
}

void RuyiNetworkSettings::__set_SubDNS(const RuyiNetworkSettingNameValue& val) {
  this->SubDNS = val;
}

void RuyiNetworkSettings::__set_MacAddress(const RuyiNetworkSettingNameValue& val) {
  this->MacAddress = val;
}

void RuyiNetworkSettings::__set_Proxy(const RuyiNetworkSettingNameValue& val) {
  this->Proxy = val;
}
std::ostream& operator<<(std::ostream& out, const RuyiNetworkSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RuyiNetworkSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->connection.read(iprot);
          this->__isset.connection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->networkType.read(iprot);
          this->__isset.networkType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->quality.read(iprot);
          this->__isset.quality = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->SSID.read(iprot);
          this->__isset.SSID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->BSSID.read(iprot);
          this->__isset.BSSID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Authentication.read(iprot);
          this->__isset.Authentication = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->DHCPEnabled.read(iprot);
          this->__isset.DHCPEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->IpAddress.read(iprot);
          this->__isset.IpAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->SubMask.read(iprot);
          this->__isset.SubMask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Gateway.read(iprot);
          this->__isset.Gateway = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->MainDNS.read(iprot);
          this->__isset.MainDNS = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->SubDNS.read(iprot);
          this->__isset.SubDNS = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->MacAddress.read(iprot);
          this->__isset.MacAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Proxy.read(iprot);
          this->__isset.Proxy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiNetworkSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiNetworkSettings");

  xfer += oprot->writeFieldBegin("connection", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->connection.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("networkType", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->networkType.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("quality", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->quality.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SSID", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->SSID.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BSSID", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->BSSID.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Authentication", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->Authentication.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DHCPEnabled", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->DHCPEnabled.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IpAddress", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->IpAddress.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubMask", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->SubMask.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Gateway", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->Gateway.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MainDNS", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->MainDNS.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubDNS", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->SubDNS.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MacAddress", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->MacAddress.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Proxy", ::apache::thrift::protocol::T_STRUCT, 14);
  xfer += this->Proxy.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiNetworkSettings &a, RuyiNetworkSettings &b) {
  using ::std::swap;
  swap(a.connection, b.connection);
  swap(a.networkType, b.networkType);
  swap(a.quality, b.quality);
  swap(a.SSID, b.SSID);
  swap(a.BSSID, b.BSSID);
  swap(a.Authentication, b.Authentication);
  swap(a.DHCPEnabled, b.DHCPEnabled);
  swap(a.IpAddress, b.IpAddress);
  swap(a.SubMask, b.SubMask);
  swap(a.Gateway, b.Gateway);
  swap(a.MainDNS, b.MainDNS);
  swap(a.SubDNS, b.SubDNS);
  swap(a.MacAddress, b.MacAddress);
  swap(a.Proxy, b.Proxy);
  swap(a.__isset, b.__isset);
}

RuyiNetworkSettings::RuyiNetworkSettings(const RuyiNetworkSettings& other4) {
  connection = other4.connection;
  networkType = other4.networkType;
  quality = other4.quality;
  SSID = other4.SSID;
  BSSID = other4.BSSID;
  Authentication = other4.Authentication;
  DHCPEnabled = other4.DHCPEnabled;
  IpAddress = other4.IpAddress;
  SubMask = other4.SubMask;
  Gateway = other4.Gateway;
  MainDNS = other4.MainDNS;
  SubDNS = other4.SubDNS;
  MacAddress = other4.MacAddress;
  Proxy = other4.Proxy;
  __isset = other4.__isset;
}
RuyiNetworkSettings& RuyiNetworkSettings::operator=(const RuyiNetworkSettings& other5) {
  connection = other5.connection;
  networkType = other5.networkType;
  quality = other5.quality;
  SSID = other5.SSID;
  BSSID = other5.BSSID;
  Authentication = other5.Authentication;
  DHCPEnabled = other5.DHCPEnabled;
  IpAddress = other5.IpAddress;
  SubMask = other5.SubMask;
  Gateway = other5.Gateway;
  MainDNS = other5.MainDNS;
  SubDNS = other5.SubDNS;
  MacAddress = other5.MacAddress;
  Proxy = other5.Proxy;
  __isset = other5.__isset;
  return *this;
}
void RuyiNetworkSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiNetworkSettings(";
  out << "connection=" << to_string(connection);
  out << ", " << "networkType=" << to_string(networkType);
  out << ", " << "quality=" << to_string(quality);
  out << ", " << "SSID=" << to_string(SSID);
  out << ", " << "BSSID=" << to_string(BSSID);
  out << ", " << "Authentication=" << to_string(Authentication);
  out << ", " << "DHCPEnabled=" << to_string(DHCPEnabled);
  out << ", " << "IpAddress=" << to_string(IpAddress);
  out << ", " << "SubMask=" << to_string(SubMask);
  out << ", " << "Gateway=" << to_string(Gateway);
  out << ", " << "MainDNS=" << to_string(MainDNS);
  out << ", " << "SubDNS=" << to_string(SubDNS);
  out << ", " << "MacAddress=" << to_string(MacAddress);
  out << ", " << "Proxy=" << to_string(Proxy);
  out << ")";
}


RuyiNetworkStatus::~RuyiNetworkStatus() throw() {
}


void RuyiNetworkStatus::__set_isWifi(const bool val) {
  this->isWifi = val;
}

void RuyiNetworkStatus::__set_Name(const std::string& val) {
  this->Name = val;
}

void RuyiNetworkStatus::__set_AdapterStatus(const bool val) {
  this->AdapterStatus = val;
}

void RuyiNetworkStatus::__set_InternetStatus(const bool val) {
  this->InternetStatus = val;
}
std::ostream& operator<<(std::ostream& out, const RuyiNetworkStatus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RuyiNetworkStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isWifi);
          this->__isset.isWifi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->AdapterStatus);
          this->__isset.AdapterStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->InternetStatus);
          this->__isset.InternetStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiNetworkStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiNetworkStatus");

  xfer += oprot->writeFieldBegin("isWifi", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->isWifi);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AdapterStatus", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->AdapterStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("InternetStatus", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->InternetStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiNetworkStatus &a, RuyiNetworkStatus &b) {
  using ::std::swap;
  swap(a.isWifi, b.isWifi);
  swap(a.Name, b.Name);
  swap(a.AdapterStatus, b.AdapterStatus);
  swap(a.InternetStatus, b.InternetStatus);
  swap(a.__isset, b.__isset);
}

RuyiNetworkStatus::RuyiNetworkStatus(const RuyiNetworkStatus& other6) {
  isWifi = other6.isWifi;
  Name = other6.Name;
  AdapterStatus = other6.AdapterStatus;
  InternetStatus = other6.InternetStatus;
  __isset = other6.__isset;
}
RuyiNetworkStatus& RuyiNetworkStatus::operator=(const RuyiNetworkStatus& other7) {
  isWifi = other7.isWifi;
  Name = other7.Name;
  AdapterStatus = other7.AdapterStatus;
  InternetStatus = other7.InternetStatus;
  __isset = other7.__isset;
  return *this;
}
void RuyiNetworkStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiNetworkStatus(";
  out << "isWifi=" << to_string(isWifi);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "AdapterStatus=" << to_string(AdapterStatus);
  out << ", " << "InternetStatus=" << to_string(InternetStatus);
  out << ")";
}


RuyiNetworkTestResult::~RuyiNetworkTestResult() throw() {
}


void RuyiNetworkTestResult::__set_localconnection(const RuyiNetworkTestItem& val) {
  this->localconnection = val;
}

void RuyiNetworkTestResult::__set_ipaddress(const RuyiNetworkTestItem& val) {
  this->ipaddress = val;
}

void RuyiNetworkTestResult::__set_internetconnection(const RuyiNetworkTestItem& val) {
  this->internetconnection = val;
}
std::ostream& operator<<(std::ostream& out, const RuyiNetworkTestResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RuyiNetworkTestResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->localconnection.read(iprot);
          this->__isset.localconnection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ipaddress.read(iprot);
          this->__isset.ipaddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->internetconnection.read(iprot);
          this->__isset.internetconnection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiNetworkTestResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiNetworkTestResult");

  xfer += oprot->writeFieldBegin("localconnection", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->localconnection.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipaddress", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ipaddress.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("internetconnection", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->internetconnection.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiNetworkTestResult &a, RuyiNetworkTestResult &b) {
  using ::std::swap;
  swap(a.localconnection, b.localconnection);
  swap(a.ipaddress, b.ipaddress);
  swap(a.internetconnection, b.internetconnection);
  swap(a.__isset, b.__isset);
}

RuyiNetworkTestResult::RuyiNetworkTestResult(const RuyiNetworkTestResult& other8) {
  localconnection = other8.localconnection;
  ipaddress = other8.ipaddress;
  internetconnection = other8.internetconnection;
  __isset = other8.__isset;
}
RuyiNetworkTestResult& RuyiNetworkTestResult::operator=(const RuyiNetworkTestResult& other9) {
  localconnection = other9.localconnection;
  ipaddress = other9.ipaddress;
  internetconnection = other9.internetconnection;
  __isset = other9.__isset;
  return *this;
}
void RuyiNetworkTestResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiNetworkTestResult(";
  out << "localconnection=" << to_string(localconnection);
  out << ", " << "ipaddress=" << to_string(ipaddress);
  out << ", " << "internetconnection=" << to_string(internetconnection);
  out << ")";
}


RuyiNetworkSpeed::~RuyiNetworkSpeed() throw() {
}


void RuyiNetworkSpeed::__set_downloadspeed(const RuyiNetworkTestItem& val) {
  this->downloadspeed = val;
}

void RuyiNetworkSpeed::__set_uploadspeed(const RuyiNetworkTestItem& val) {
  this->uploadspeed = val;
}
std::ostream& operator<<(std::ostream& out, const RuyiNetworkSpeed& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RuyiNetworkSpeed::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->downloadspeed.read(iprot);
          this->__isset.downloadspeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->uploadspeed.read(iprot);
          this->__isset.uploadspeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiNetworkSpeed::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiNetworkSpeed");

  xfer += oprot->writeFieldBegin("downloadspeed", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->downloadspeed.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uploadspeed", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->uploadspeed.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiNetworkSpeed &a, RuyiNetworkSpeed &b) {
  using ::std::swap;
  swap(a.downloadspeed, b.downloadspeed);
  swap(a.uploadspeed, b.uploadspeed);
  swap(a.__isset, b.__isset);
}

RuyiNetworkSpeed::RuyiNetworkSpeed(const RuyiNetworkSpeed& other10) {
  downloadspeed = other10.downloadspeed;
  uploadspeed = other10.uploadspeed;
  __isset = other10.__isset;
}
RuyiNetworkSpeed& RuyiNetworkSpeed::operator=(const RuyiNetworkSpeed& other11) {
  downloadspeed = other11.downloadspeed;
  uploadspeed = other11.uploadspeed;
  __isset = other11.__isset;
  return *this;
}
void RuyiNetworkSpeed::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiNetworkSpeed(";
  out << "downloadspeed=" << to_string(downloadspeed);
  out << ", " << "uploadspeed=" << to_string(uploadspeed);
  out << ")";
}


NetworkConnectionStatus::~NetworkConnectionStatus() throw() {
}


void NetworkConnectionStatus::__set_preLanAdapter(const bool val) {
  this->preLanAdapter = val;
}

void NetworkConnectionStatus::__set_curLanAdapter(const bool val) {
  this->curLanAdapter = val;
}

void NetworkConnectionStatus::__set_preWlanAdapter(const bool val) {
  this->preWlanAdapter = val;
}

void NetworkConnectionStatus::__set_curWlanAdapter(const bool val) {
  this->curWlanAdapter = val;
}

void NetworkConnectionStatus::__set_preInternetConnection(const bool val) {
  this->preInternetConnection = val;
}

void NetworkConnectionStatus::__set_curInternetConnection(const bool val) {
  this->curInternetConnection = val;
}
std::ostream& operator<<(std::ostream& out, const NetworkConnectionStatus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t NetworkConnectionStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->preLanAdapter);
          this->__isset.preLanAdapter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->curLanAdapter);
          this->__isset.curLanAdapter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->preWlanAdapter);
          this->__isset.preWlanAdapter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->curWlanAdapter);
          this->__isset.curWlanAdapter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->preInternetConnection);
          this->__isset.preInternetConnection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->curInternetConnection);
          this->__isset.curInternetConnection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NetworkConnectionStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NetworkConnectionStatus");

  xfer += oprot->writeFieldBegin("preLanAdapter", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->preLanAdapter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("curLanAdapter", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->curLanAdapter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("preWlanAdapter", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->preWlanAdapter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("curWlanAdapter", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->curWlanAdapter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("preInternetConnection", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->preInternetConnection);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("curInternetConnection", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->curInternetConnection);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NetworkConnectionStatus &a, NetworkConnectionStatus &b) {
  using ::std::swap;
  swap(a.preLanAdapter, b.preLanAdapter);
  swap(a.curLanAdapter, b.curLanAdapter);
  swap(a.preWlanAdapter, b.preWlanAdapter);
  swap(a.curWlanAdapter, b.curWlanAdapter);
  swap(a.preInternetConnection, b.preInternetConnection);
  swap(a.curInternetConnection, b.curInternetConnection);
  swap(a.__isset, b.__isset);
}

NetworkConnectionStatus::NetworkConnectionStatus(const NetworkConnectionStatus& other12) {
  preLanAdapter = other12.preLanAdapter;
  curLanAdapter = other12.curLanAdapter;
  preWlanAdapter = other12.preWlanAdapter;
  curWlanAdapter = other12.curWlanAdapter;
  preInternetConnection = other12.preInternetConnection;
  curInternetConnection = other12.curInternetConnection;
  __isset = other12.__isset;
}
NetworkConnectionStatus& NetworkConnectionStatus::operator=(const NetworkConnectionStatus& other13) {
  preLanAdapter = other13.preLanAdapter;
  curLanAdapter = other13.curLanAdapter;
  preWlanAdapter = other13.preWlanAdapter;
  curWlanAdapter = other13.curWlanAdapter;
  preInternetConnection = other13.preInternetConnection;
  curInternetConnection = other13.curInternetConnection;
  __isset = other13.__isset;
  return *this;
}
void NetworkConnectionStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NetworkConnectionStatus(";
  out << "preLanAdapter=" << to_string(preLanAdapter);
  out << ", " << "curLanAdapter=" << to_string(curLanAdapter);
  out << ", " << "preWlanAdapter=" << to_string(preWlanAdapter);
  out << ", " << "curWlanAdapter=" << to_string(curWlanAdapter);
  out << ", " << "preInternetConnection=" << to_string(preInternetConnection);
  out << ", " << "curInternetConnection=" << to_string(curInternetConnection);
  out << ")";
}


BluetoothDevice::~BluetoothDevice() throw() {
}


void BluetoothDevice::__set_DeviceName(const std::string& val) {
  this->DeviceName = val;
}

void BluetoothDevice::__set_DeviceAddress(const std::string& val) {
  this->DeviceAddress = val;
}

void BluetoothDevice::__set_DeviceClass(const int32_t val) {
  this->DeviceClass = val;
}

void BluetoothDevice::__set_Connected(const bool val) {
  this->Connected = val;
}

void BluetoothDevice::__set_Authenticated(const bool val) {
  this->Authenticated = val;
}
std::ostream& operator<<(std::ostream& out, const BluetoothDevice& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BluetoothDevice::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->DeviceName);
          this->__isset.DeviceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->DeviceAddress);
          this->__isset.DeviceAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->DeviceClass);
          this->__isset.DeviceClass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->Connected);
          this->__isset.Connected = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->Authenticated);
          this->__isset.Authenticated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BluetoothDevice::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BluetoothDevice");

  xfer += oprot->writeFieldBegin("DeviceName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->DeviceName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DeviceAddress", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->DeviceAddress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DeviceClass", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->DeviceClass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Connected", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->Connected);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Authenticated", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->Authenticated);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BluetoothDevice &a, BluetoothDevice &b) {
  using ::std::swap;
  swap(a.DeviceName, b.DeviceName);
  swap(a.DeviceAddress, b.DeviceAddress);
  swap(a.DeviceClass, b.DeviceClass);
  swap(a.Connected, b.Connected);
  swap(a.Authenticated, b.Authenticated);
  swap(a.__isset, b.__isset);
}

BluetoothDevice::BluetoothDevice(const BluetoothDevice& other14) {
  DeviceName = other14.DeviceName;
  DeviceAddress = other14.DeviceAddress;
  DeviceClass = other14.DeviceClass;
  Connected = other14.Connected;
  Authenticated = other14.Authenticated;
  __isset = other14.__isset;
}
BluetoothDevice& BluetoothDevice::operator=(const BluetoothDevice& other15) {
  DeviceName = other15.DeviceName;
  DeviceAddress = other15.DeviceAddress;
  DeviceClass = other15.DeviceClass;
  Connected = other15.Connected;
  Authenticated = other15.Authenticated;
  __isset = other15.__isset;
  return *this;
}
void BluetoothDevice::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BluetoothDevice(";
  out << "DeviceName=" << to_string(DeviceName);
  out << ", " << "DeviceAddress=" << to_string(DeviceAddress);
  out << ", " << "DeviceClass=" << to_string(DeviceClass);
  out << ", " << "Connected=" << to_string(Connected);
  out << ", " << "Authenticated=" << to_string(Authenticated);
  out << ")";
}


BluetoothDeviceList::~BluetoothDeviceList() throw() {
}


void BluetoothDeviceList::__set_DeviceList(const std::vector<BluetoothDevice> & val) {
  this->DeviceList = val;
}
std::ostream& operator<<(std::ostream& out, const BluetoothDeviceList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BluetoothDeviceList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DeviceList.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _etype19;
            xfer += iprot->readListBegin(_etype19, _size16);
            this->DeviceList.resize(_size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              xfer += this->DeviceList[_i20].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DeviceList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BluetoothDeviceList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BluetoothDeviceList");

  xfer += oprot->writeFieldBegin("DeviceList", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DeviceList.size()));
    std::vector<BluetoothDevice> ::const_iterator _iter21;
    for (_iter21 = this->DeviceList.begin(); _iter21 != this->DeviceList.end(); ++_iter21)
    {
      xfer += (*_iter21).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BluetoothDeviceList &a, BluetoothDeviceList &b) {
  using ::std::swap;
  swap(a.DeviceList, b.DeviceList);
  swap(a.__isset, b.__isset);
}

BluetoothDeviceList::BluetoothDeviceList(const BluetoothDeviceList& other22) {
  DeviceList = other22.DeviceList;
  __isset = other22.__isset;
}
BluetoothDeviceList& BluetoothDeviceList::operator=(const BluetoothDeviceList& other23) {
  DeviceList = other23.DeviceList;
  __isset = other23.__isset;
  return *this;
}
void BluetoothDeviceList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BluetoothDeviceList(";
  out << "DeviceList=" << to_string(DeviceList);
  out << ")";
}


BluetoothDevicePinRequest::~BluetoothDevicePinRequest() throw() {
}


void BluetoothDevicePinRequest::__set_DeviceName(const std::string& val) {
  this->DeviceName = val;
}

void BluetoothDevicePinRequest::__set_Pin(const std::string& val) {
  this->Pin = val;
}
std::ostream& operator<<(std::ostream& out, const BluetoothDevicePinRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BluetoothDevicePinRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->DeviceName);
          this->__isset.DeviceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Pin);
          this->__isset.Pin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BluetoothDevicePinRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BluetoothDevicePinRequest");

  xfer += oprot->writeFieldBegin("DeviceName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->DeviceName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Pin", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Pin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BluetoothDevicePinRequest &a, BluetoothDevicePinRequest &b) {
  using ::std::swap;
  swap(a.DeviceName, b.DeviceName);
  swap(a.Pin, b.Pin);
  swap(a.__isset, b.__isset);
}

BluetoothDevicePinRequest::BluetoothDevicePinRequest(const BluetoothDevicePinRequest& other24) {
  DeviceName = other24.DeviceName;
  Pin = other24.Pin;
  __isset = other24.__isset;
}
BluetoothDevicePinRequest& BluetoothDevicePinRequest::operator=(const BluetoothDevicePinRequest& other25) {
  DeviceName = other25.DeviceName;
  Pin = other25.Pin;
  __isset = other25.__isset;
  return *this;
}
void BluetoothDevicePinRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BluetoothDevicePinRequest(";
  out << "DeviceName=" << to_string(DeviceName);
  out << ", " << "Pin=" << to_string(Pin);
  out << ")";
}


CategoryNode::~CategoryNode() throw() {
}


void CategoryNode::__set_id(const std::string& val) {
  this->id = val;
}

void CategoryNode::__set_categoryId(const std::string& val) {
  this->categoryId = val;
}

void CategoryNode::__set_sortingPriority(const int32_t val) {
  this->sortingPriority = val;
}

void CategoryNode::__set_children(const std::vector<CategoryNode> & val) {
  this->children = val;
}
std::ostream& operator<<(std::ostream& out, const CategoryNode& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CategoryNode::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->categoryId);
          this->__isset.categoryId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sortingPriority);
          this->__isset.sortingPriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->children.clear();
            uint32_t _size26;
            ::apache::thrift::protocol::TType _etype29;
            xfer += iprot->readListBegin(_etype29, _size26);
            this->children.resize(_size26);
            uint32_t _i30;
            for (_i30 = 0; _i30 < _size26; ++_i30)
            {
              xfer += this->children[_i30].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.children = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CategoryNode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CategoryNode");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("categoryId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->categoryId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sortingPriority", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sortingPriority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("children", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->children.size()));
    std::vector<CategoryNode> ::const_iterator _iter31;
    for (_iter31 = this->children.begin(); _iter31 != this->children.end(); ++_iter31)
    {
      xfer += (*_iter31).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CategoryNode &a, CategoryNode &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.categoryId, b.categoryId);
  swap(a.sortingPriority, b.sortingPriority);
  swap(a.children, b.children);
  swap(a.__isset, b.__isset);
}

CategoryNode::CategoryNode(const CategoryNode& other32) {
  id = other32.id;
  categoryId = other32.categoryId;
  sortingPriority = other32.sortingPriority;
  children = other32.children;
  __isset = other32.__isset;
}
CategoryNode& CategoryNode::operator=(const CategoryNode& other33) {
  id = other33.id;
  categoryId = other33.categoryId;
  sortingPriority = other33.sortingPriority;
  children = other33.children;
  __isset = other33.__isset;
  return *this;
}
void CategoryNode::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CategoryNode(";
  out << "id=" << to_string(id);
  out << ", " << "categoryId=" << to_string(categoryId);
  out << ", " << "sortingPriority=" << to_string(sortingPriority);
  out << ", " << "children=" << to_string(children);
  out << ")";
}


SettingSearchResult::~SettingSearchResult() throw() {
}


void SettingSearchResult::__set_Version(const std::string& val) {
  this->Version = val;
}

void SettingSearchResult::__set_SettingItems(const std::vector< ::Ruyi::SDK::CommonType::SettingItem> & val) {
  this->SettingItems = val;
}
std::ostream& operator<<(std::ostream& out, const SettingSearchResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SettingSearchResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Version);
          this->__isset.Version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SettingItems.clear();
            uint32_t _size34;
            ::apache::thrift::protocol::TType _etype37;
            xfer += iprot->readListBegin(_etype37, _size34);
            this->SettingItems.resize(_size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              xfer += this->SettingItems[_i38].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SettingItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SettingSearchResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SettingSearchResult");

  xfer += oprot->writeFieldBegin("Version", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SettingItems", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SettingItems.size()));
    std::vector< ::Ruyi::SDK::CommonType::SettingItem> ::const_iterator _iter39;
    for (_iter39 = this->SettingItems.begin(); _iter39 != this->SettingItems.end(); ++_iter39)
    {
      xfer += (*_iter39).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SettingSearchResult &a, SettingSearchResult &b) {
  using ::std::swap;
  swap(a.Version, b.Version);
  swap(a.SettingItems, b.SettingItems);
  swap(a.__isset, b.__isset);
}

SettingSearchResult::SettingSearchResult(const SettingSearchResult& other40) {
  Version = other40.Version;
  SettingItems = other40.SettingItems;
  __isset = other40.__isset;
}
SettingSearchResult& SettingSearchResult::operator=(const SettingSearchResult& other41) {
  Version = other41.Version;
  SettingItems = other41.SettingItems;
  __isset = other41.__isset;
  return *this;
}
void SettingSearchResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SettingSearchResult(";
  out << "Version=" << to_string(Version);
  out << ", " << "SettingItems=" << to_string(SettingItems);
  out << ")";
}


SettingTree::~SettingTree() throw() {
}


void SettingTree::__set_CateNode(const CategoryNode& val) {
  this->CateNode = val;
}

void SettingTree::__set_SettingCategories(const std::map<std::string,  ::Ruyi::SDK::CommonType::SettingCategory> & val) {
  this->SettingCategories = val;
}

void SettingTree::__set_SettingItems(const std::map<std::string,  ::Ruyi::SDK::CommonType::SettingItem> & val) {
  this->SettingItems = val;
}
std::ostream& operator<<(std::ostream& out, const SettingTree& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SettingTree::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->CateNode.read(iprot);
          this->__isset.CateNode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->SettingCategories.clear();
            uint32_t _size42;
            ::apache::thrift::protocol::TType _ktype43;
            ::apache::thrift::protocol::TType _vtype44;
            xfer += iprot->readMapBegin(_ktype43, _vtype44, _size42);
            uint32_t _i46;
            for (_i46 = 0; _i46 < _size42; ++_i46)
            {
              std::string _key47;
              xfer += iprot->readString(_key47);
               ::Ruyi::SDK::CommonType::SettingCategory& _val48 = this->SettingCategories[_key47];
              xfer += _val48.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.SettingCategories = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->SettingItems.clear();
            uint32_t _size49;
            ::apache::thrift::protocol::TType _ktype50;
            ::apache::thrift::protocol::TType _vtype51;
            xfer += iprot->readMapBegin(_ktype50, _vtype51, _size49);
            uint32_t _i53;
            for (_i53 = 0; _i53 < _size49; ++_i53)
            {
              std::string _key54;
              xfer += iprot->readString(_key54);
               ::Ruyi::SDK::CommonType::SettingItem& _val55 = this->SettingItems[_key54];
              xfer += _val55.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.SettingItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SettingTree::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SettingTree");

  xfer += oprot->writeFieldBegin("CateNode", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->CateNode.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SettingCategories", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SettingCategories.size()));
    std::map<std::string,  ::Ruyi::SDK::CommonType::SettingCategory> ::const_iterator _iter56;
    for (_iter56 = this->SettingCategories.begin(); _iter56 != this->SettingCategories.end(); ++_iter56)
    {
      xfer += oprot->writeString(_iter56->first);
      xfer += _iter56->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SettingItems", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SettingItems.size()));
    std::map<std::string,  ::Ruyi::SDK::CommonType::SettingItem> ::const_iterator _iter57;
    for (_iter57 = this->SettingItems.begin(); _iter57 != this->SettingItems.end(); ++_iter57)
    {
      xfer += oprot->writeString(_iter57->first);
      xfer += _iter57->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SettingTree &a, SettingTree &b) {
  using ::std::swap;
  swap(a.CateNode, b.CateNode);
  swap(a.SettingCategories, b.SettingCategories);
  swap(a.SettingItems, b.SettingItems);
  swap(a.__isset, b.__isset);
}

SettingTree::SettingTree(const SettingTree& other58) {
  CateNode = other58.CateNode;
  SettingCategories = other58.SettingCategories;
  SettingItems = other58.SettingItems;
  __isset = other58.__isset;
}
SettingTree& SettingTree::operator=(const SettingTree& other59) {
  CateNode = other59.CateNode;
  SettingCategories = other59.SettingCategories;
  SettingItems = other59.SettingItems;
  __isset = other59.__isset;
  return *this;
}
void SettingTree::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SettingTree(";
  out << "CateNode=" << to_string(CateNode);
  out << ", " << "SettingCategories=" << to_string(SettingCategories);
  out << ", " << "SettingItems=" << to_string(SettingItems);
  out << ")";
}


NodeList::~NodeList() throw() {
}


void NodeList::__set_SettingCategories(const std::vector< ::Ruyi::SDK::CommonType::SettingCategory> & val) {
  this->SettingCategories = val;
}

void NodeList::__set_SettingItems(const std::vector< ::Ruyi::SDK::CommonType::SettingItem> & val) {
  this->SettingItems = val;
}
std::ostream& operator<<(std::ostream& out, const NodeList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t NodeList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SettingCategories.clear();
            uint32_t _size60;
            ::apache::thrift::protocol::TType _etype63;
            xfer += iprot->readListBegin(_etype63, _size60);
            this->SettingCategories.resize(_size60);
            uint32_t _i64;
            for (_i64 = 0; _i64 < _size60; ++_i64)
            {
              xfer += this->SettingCategories[_i64].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SettingCategories = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SettingItems.clear();
            uint32_t _size65;
            ::apache::thrift::protocol::TType _etype68;
            xfer += iprot->readListBegin(_etype68, _size65);
            this->SettingItems.resize(_size65);
            uint32_t _i69;
            for (_i69 = 0; _i69 < _size65; ++_i69)
            {
              xfer += this->SettingItems[_i69].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SettingItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NodeList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NodeList");

  xfer += oprot->writeFieldBegin("SettingCategories", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SettingCategories.size()));
    std::vector< ::Ruyi::SDK::CommonType::SettingCategory> ::const_iterator _iter70;
    for (_iter70 = this->SettingCategories.begin(); _iter70 != this->SettingCategories.end(); ++_iter70)
    {
      xfer += (*_iter70).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SettingItems", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SettingItems.size()));
    std::vector< ::Ruyi::SDK::CommonType::SettingItem> ::const_iterator _iter71;
    for (_iter71 = this->SettingItems.begin(); _iter71 != this->SettingItems.end(); ++_iter71)
    {
      xfer += (*_iter71).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NodeList &a, NodeList &b) {
  using ::std::swap;
  swap(a.SettingCategories, b.SettingCategories);
  swap(a.SettingItems, b.SettingItems);
  swap(a.__isset, b.__isset);
}

NodeList::NodeList(const NodeList& other72) {
  SettingCategories = other72.SettingCategories;
  SettingItems = other72.SettingItems;
  __isset = other72.__isset;
}
NodeList& NodeList::operator=(const NodeList& other73) {
  SettingCategories = other73.SettingCategories;
  SettingItems = other73.SettingItems;
  __isset = other73.__isset;
  return *this;
}
void NodeList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NodeList(";
  out << "SettingCategories=" << to_string(SettingCategories);
  out << ", " << "SettingItems=" << to_string(SettingItems);
  out << ")";
}


WifiEntity::~WifiEntity() throw() {
}


void WifiEntity::__set_Name(const std::string& val) {
  this->Name = val;
}

void WifiEntity::__set_MacAddress(const std::string& val) {
  this->MacAddress = val;
}

void WifiEntity::__set_Channel(const _int val) {
  this->Channel = val;
}

void WifiEntity::__set_CenterFrequancy(const _int val) {
  this->CenterFrequancy = val;
}

void WifiEntity::__set_Rssi(const _int val) {
  this->Rssi = val;
}

void WifiEntity::__set_Connected(const bool val) {
  this->Connected = val;
}

void WifiEntity::__set_SecurityEnabled(const bool val) {
  this->SecurityEnabled = val;
}

void WifiEntity::__set_HasProfile(const bool val) {
  this->HasProfile = val;
}
std::ostream& operator<<(std::ostream& out, const WifiEntity& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t WifiEntity::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->MacAddress);
          this->__isset.MacAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Channel);
          this->__isset.Channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->CenterFrequancy);
          this->__isset.CenterFrequancy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Rssi);
          this->__isset.Rssi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->Connected);
          this->__isset.Connected = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->SecurityEnabled);
          this->__isset.SecurityEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->HasProfile);
          this->__isset.HasProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WifiEntity::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WifiEntity");

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MacAddress", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->MacAddress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Channel", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->Channel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CenterFrequancy", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->CenterFrequancy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Rssi", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->Rssi);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Connected", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->Connected);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SecurityEnabled", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->SecurityEnabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HasProfile", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->HasProfile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WifiEntity &a, WifiEntity &b) {
  using ::std::swap;
  swap(a.Name, b.Name);
  swap(a.MacAddress, b.MacAddress);
  swap(a.Channel, b.Channel);
  swap(a.CenterFrequancy, b.CenterFrequancy);
  swap(a.Rssi, b.Rssi);
  swap(a.Connected, b.Connected);
  swap(a.SecurityEnabled, b.SecurityEnabled);
  swap(a.HasProfile, b.HasProfile);
  swap(a.__isset, b.__isset);
}

WifiEntity::WifiEntity(const WifiEntity& other74) {
  Name = other74.Name;
  MacAddress = other74.MacAddress;
  Channel = other74.Channel;
  CenterFrequancy = other74.CenterFrequancy;
  Rssi = other74.Rssi;
  Connected = other74.Connected;
  SecurityEnabled = other74.SecurityEnabled;
  HasProfile = other74.HasProfile;
  __isset = other74.__isset;
}
WifiEntity& WifiEntity::operator=(const WifiEntity& other75) {
  Name = other75.Name;
  MacAddress = other75.MacAddress;
  Channel = other75.Channel;
  CenterFrequancy = other75.CenterFrequancy;
  Rssi = other75.Rssi;
  Connected = other75.Connected;
  SecurityEnabled = other75.SecurityEnabled;
  HasProfile = other75.HasProfile;
  __isset = other75.__isset;
  return *this;
}
void WifiEntity::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WifiEntity(";
  out << "Name=" << to_string(Name);
  out << ", " << "MacAddress=" << to_string(MacAddress);
  out << ", " << "Channel=" << to_string(Channel);
  out << ", " << "CenterFrequancy=" << to_string(CenterFrequancy);
  out << ", " << "Rssi=" << to_string(Rssi);
  out << ", " << "Connected=" << to_string(Connected);
  out << ", " << "SecurityEnabled=" << to_string(SecurityEnabled);
  out << ", " << "HasProfile=" << to_string(HasProfile);
  out << ")";
}

}}}} // namespace
