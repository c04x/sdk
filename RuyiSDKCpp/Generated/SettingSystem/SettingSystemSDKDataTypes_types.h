/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SettingSystemSDKDataTypes_TYPES_H
#define SettingSystemSDKDataTypes_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace Ruyi { namespace SDK { namespace SettingSystem { namespace Api {

struct NodeType {
  enum type {
    Category = 1,
    SettingItem = 2,
    All = 3
  };
};

extern const std::map<int, const char*> _NodeType_VALUES_TO_NAMES;

typedef std::string JSON;

class CategoryNode;

class AppDataRecord;

class AppDataCollection;

class AppData;

class SettingSearchResult;

class SettingTree;

class NodeList;

typedef struct _CategoryNode__isset {
  _CategoryNode__isset() : id(false), categoryId(false), sortingPriority(false), children(false) {}
  bool id :1;
  bool categoryId :1;
  bool sortingPriority :1;
  bool children :1;
} _CategoryNode__isset;

class CategoryNode : public virtual ::apache::thrift::TBase {
 public:

  CategoryNode(const CategoryNode&);
  CategoryNode& operator=(const CategoryNode&);
  CategoryNode() : id(), categoryId(), sortingPriority(0) {
  }

  virtual ~CategoryNode() throw();
  std::string id;
  std::string categoryId;
  int32_t sortingPriority;
  std::vector<CategoryNode>  children;

  _CategoryNode__isset __isset;

  void __set_id(const std::string& val);

  void __set_categoryId(const std::string& val);

  void __set_sortingPriority(const int32_t val);

  void __set_children(const std::vector<CategoryNode> & val);

  bool operator == (const CategoryNode & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(categoryId == rhs.categoryId))
      return false;
    if (!(sortingPriority == rhs.sortingPriority))
      return false;
    if (!(children == rhs.children))
      return false;
    return true;
  }
  bool operator != (const CategoryNode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CategoryNode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CategoryNode &a, CategoryNode &b);

inline std::ostream& operator<<(std::ostream& out, const CategoryNode& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _AppDataRecord__isset {
  _AppDataRecord__isset() : id(false), value(true) {}
  bool id :1;
  bool value :1;
} _AppDataRecord__isset;

class AppDataRecord : public virtual ::apache::thrift::TBase {
 public:

  AppDataRecord(const AppDataRecord&);
  AppDataRecord& operator=(const AppDataRecord&);
  AppDataRecord() : id(), value("{}") {
  }

  virtual ~AppDataRecord() throw();
  std::string id;
  JSON value;

  _AppDataRecord__isset __isset;

  void __set_id(const std::string& val);

  void __set_value(const JSON& val);

  bool operator == (const AppDataRecord & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const AppDataRecord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppDataRecord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AppDataRecord &a, AppDataRecord &b);

inline std::ostream& operator<<(std::ostream& out, const AppDataRecord& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _AppDataCollection__isset {
  _AppDataCollection__isset() : id(false), records(false) {}
  bool id :1;
  bool records :1;
} _AppDataCollection__isset;

class AppDataCollection : public virtual ::apache::thrift::TBase {
 public:

  AppDataCollection(const AppDataCollection&);
  AppDataCollection& operator=(const AppDataCollection&);
  AppDataCollection() : id() {
  }

  virtual ~AppDataCollection() throw();
  std::string id;
  std::vector<AppDataRecord>  records;

  _AppDataCollection__isset __isset;

  void __set_id(const std::string& val);

  void __set_records(const std::vector<AppDataRecord> & val);

  bool operator == (const AppDataCollection & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(records == rhs.records))
      return false;
    return true;
  }
  bool operator != (const AppDataCollection &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppDataCollection & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AppDataCollection &a, AppDataCollection &b);

inline std::ostream& operator<<(std::ostream& out, const AppDataCollection& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _AppData__isset {
  _AppData__isset() : appId(false), data(false) {}
  bool appId :1;
  bool data :1;
} _AppData__isset;

class AppData : public virtual ::apache::thrift::TBase {
 public:

  AppData(const AppData&);
  AppData& operator=(const AppData&);
  AppData() : appId() {
  }

  virtual ~AppData() throw();
  std::string appId;
  std::vector<AppDataCollection>  data;

  _AppData__isset __isset;

  void __set_appId(const std::string& val);

  void __set_data(const std::vector<AppDataCollection> & val);

  bool operator == (const AppData & rhs) const
  {
    if (!(appId == rhs.appId))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const AppData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AppData &a, AppData &b);

inline std::ostream& operator<<(std::ostream& out, const AppData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SettingSearchResult__isset {
  _SettingSearchResult__isset() : Version(false), SettingItems(false) {}
  bool Version :1;
  bool SettingItems :1;
} _SettingSearchResult__isset;

class SettingSearchResult : public virtual ::apache::thrift::TBase {
 public:

  SettingSearchResult(const SettingSearchResult&);
  SettingSearchResult& operator=(const SettingSearchResult&);
  SettingSearchResult() : Version() {
  }

  virtual ~SettingSearchResult() throw();
  std::string Version;
  std::vector<CommonTypeSDKDataTypes.SettingItem>  SettingItems;

  _SettingSearchResult__isset __isset;

  void __set_Version(const std::string& val);

  void __set_SettingItems(const std::vector<CommonTypeSDKDataTypes.SettingItem> & val);

  bool operator == (const SettingSearchResult & rhs) const
  {
    if (!(Version == rhs.Version))
      return false;
    if (!(SettingItems == rhs.SettingItems))
      return false;
    return true;
  }
  bool operator != (const SettingSearchResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSearchResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SettingSearchResult &a, SettingSearchResult &b);

inline std::ostream& operator<<(std::ostream& out, const SettingSearchResult& obj)
{
  obj.printTo(out);
  return out;
}
