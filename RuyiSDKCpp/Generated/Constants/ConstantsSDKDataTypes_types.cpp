/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ConstantsSDKDataTypes_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Ruyi { namespace SDK { namespace Constants {


BraincloudServerInfo::~BraincloudServerInfo() throw() {
}


void BraincloudServerInfo::__set_name(const std::string& val) {
  this->name = val;
}

void BraincloudServerInfo::__set_urlRoot(const std::string& val) {
  this->urlRoot = val;
}

void BraincloudServerInfo::__set_dispatcher(const std::string& val) {
  this->dispatcher = val;
}

void BraincloudServerInfo::__set_secretKey(const std::string& val) {
  this->secretKey = val;
}

void BraincloudServerInfo::__set_appId(const std::string& val) {
  this->appId = val;
}

void BraincloudServerInfo::__set_appVersion(const std::string& val) {
  this->appVersion = val;
}

uint32_t BraincloudServerInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->urlRoot);
          this->__isset.urlRoot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dispatcher);
          this->__isset.dispatcher = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->secretKey);
          this->__isset.secretKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appId);
          this->__isset.appId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appVersion);
          this->__isset.appVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BraincloudServerInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BraincloudServerInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("urlRoot", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->urlRoot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dispatcher", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->dispatcher);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("secretKey", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->secretKey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appId", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->appId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appVersion", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->appVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BraincloudServerInfo &a, BraincloudServerInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.urlRoot, b.urlRoot);
  swap(a.dispatcher, b.dispatcher);
  swap(a.secretKey, b.secretKey);
  swap(a.appId, b.appId);
  swap(a.appVersion, b.appVersion);
  swap(a.__isset, b.__isset);
}

BraincloudServerInfo::BraincloudServerInfo(const BraincloudServerInfo& other0) {
  name = other0.name;
  urlRoot = other0.urlRoot;
  dispatcher = other0.dispatcher;
  secretKey = other0.secretKey;
  appId = other0.appId;
  appVersion = other0.appVersion;
  __isset = other0.__isset;
}
BraincloudServerInfo& BraincloudServerInfo::operator=(const BraincloudServerInfo& other1) {
  name = other1.name;
  urlRoot = other1.urlRoot;
  dispatcher = other1.dispatcher;
  secretKey = other1.secretKey;
  appId = other1.appId;
  appVersion = other1.appVersion;
  __isset = other1.__isset;
  return *this;
}
void BraincloudServerInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BraincloudServerInfo(";
  out << "name=" << to_string(name);
  out << ", " << "urlRoot=" << to_string(urlRoot);
  out << ", " << "dispatcher=" << to_string(dispatcher);
  out << ", " << "secretKey=" << to_string(secretKey);
  out << ", " << "appId=" << to_string(appId);
  out << ", " << "appVersion=" << to_string(appVersion);
  out << ")";
}

}}} // namespace
