/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ConstantsSDKDataTypes_TYPES_H
#define ConstantsSDKDataTypes_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace Ruyi { namespace SDK { namespace Constants {

class BraincloudServerInfo;

typedef struct _BraincloudServerInfo__isset {
  _BraincloudServerInfo__isset() : name(false), urlRoot(false), dispatcher(false), secretKey(false), appId(false), appVersion(false) {}
  bool name :1;
  bool urlRoot :1;
  bool dispatcher :1;
  bool secretKey :1;
  bool appId :1;
  bool appVersion :1;
} _BraincloudServerInfo__isset;

class BraincloudServerInfo : public virtual ::apache::thrift::TBase {
 public:

  BraincloudServerInfo(const BraincloudServerInfo&);
  BraincloudServerInfo& operator=(const BraincloudServerInfo&);
  BraincloudServerInfo() : name(), urlRoot(), dispatcher(), secretKey(), appId(), appVersion() {
  }

  virtual ~BraincloudServerInfo() throw();
  std::string name;
  std::string urlRoot;
  std::string dispatcher;
  std::string secretKey;
  std::string appId;
  std::string appVersion;

  _BraincloudServerInfo__isset __isset;

  void __set_name(const std::string& val);

  void __set_urlRoot(const std::string& val);

  void __set_dispatcher(const std::string& val);

  void __set_secretKey(const std::string& val);

  void __set_appId(const std::string& val);

  void __set_appVersion(const std::string& val);

  bool operator == (const BraincloudServerInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(urlRoot == rhs.urlRoot))
      return false;
    if (!(dispatcher == rhs.dispatcher))
      return false;
    if (!(secretKey == rhs.secretKey))
      return false;
    if (!(appId == rhs.appId))
      return false;
    if (!(appVersion == rhs.appVersion))
      return false;
    return true;
  }
  bool operator != (const BraincloudServerInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BraincloudServerInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BraincloudServerInfo &a, BraincloudServerInfo &b);

inline std::ostream& operator<<(std::ostream& out, const BraincloudServerInfo& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
