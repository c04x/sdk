/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ruyi.SDK.CommonType
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ActionTrigger : TBase
  {
    private InputCategory _InputCagetory;
    private List<int> _TriggerConditions;

    /// <summary>
    /// 
    /// <seealso cref="InputCategory"/>
    /// </summary>
    public InputCategory InputCagetory
    {
      get
      {
        return _InputCagetory;
      }
      set
      {
        __isset.InputCagetory = true;
        this._InputCagetory = value;
      }
    }

    public List<int> TriggerConditions
    {
      get
      {
        return _TriggerConditions;
      }
      set
      {
        __isset.TriggerConditions = true;
        this._TriggerConditions = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool InputCagetory;
      public bool TriggerConditions;
    }

    public ActionTrigger() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                InputCagetory = (InputCategory)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  TriggerConditions = new List<int>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    int _elem2;
                    _elem2 = iprot.ReadI32();
                    TriggerConditions.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ActionTrigger");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.InputCagetory) {
          field.Name = "InputCagetory";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)InputCagetory);
          oprot.WriteFieldEnd();
        }
        if (TriggerConditions != null && __isset.TriggerConditions) {
          field.Name = "TriggerConditions";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, TriggerConditions.Count));
            foreach (int _iter3 in TriggerConditions)
            {
              oprot.WriteI32(_iter3);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ActionTrigger(");
      bool __first = true;
      if (__isset.InputCagetory) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InputCagetory: ");
        __sb.Append(InputCagetory);
      }
      if (TriggerConditions != null && __isset.TriggerConditions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TriggerConditions: ");
        __sb.Append(TriggerConditions);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
