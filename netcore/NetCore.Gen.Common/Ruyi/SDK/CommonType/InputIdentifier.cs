/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.CommonType
{

  public partial class InputIdentifier : TBase
  {
    private string _Device;
    private string _Value;
    private string _ActivateEvent;
    private InputModifier _Modifier;

    public string Device
    {
      get
      {
        return _Device;
      }
      set
      {
        __isset.Device = true;
        this._Device = value;
      }
    }

    public string Value
    {
      get
      {
        return _Value;
      }
      set
      {
        __isset.@Value = true;
        this._Value = value;
      }
    }

    public string ActivateEvent
    {
      get
      {
        return _ActivateEvent;
      }
      set
      {
        __isset.ActivateEvent = true;
        this._ActivateEvent = value;
      }
    }

    public InputModifier Modifier
    {
      get
      {
        return _Modifier;
      }
      set
      {
        __isset.Modifier = true;
        this._Modifier = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool Device;
      public bool @Value;
      public bool ActivateEvent;
      public bool Modifier;
    }

    public InputIdentifier()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Device = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Value = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                ActivateEvent = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Modifier = new InputModifier();
                await Modifier.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("InputIdentifier");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Device != null && __isset.Device)
        {
          field.Name = "Device";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Device, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Value != null && __isset.@Value)
        {
          field.Name = "Value";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Value, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ActivateEvent != null && __isset.ActivateEvent)
        {
          field.Name = "ActivateEvent";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ActivateEvent, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Modifier != null && __isset.Modifier)
        {
          field.Name = "Modifier";
          field.Type = TType.Struct;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Modifier.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("InputIdentifier(");
      bool __first = true;
      if (Device != null && __isset.Device)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Device: ");
        sb.Append(Device);
      }
      if (Value != null && __isset.@Value)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Value: ");
        sb.Append(Value);
      }
      if (ActivateEvent != null && __isset.ActivateEvent)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ActivateEvent: ");
        sb.Append(ActivateEvent);
      }
      if (Modifier != null && __isset.Modifier)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Modifier: ");
        sb.Append(Modifier== null ? "<null>" : Modifier.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
