/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.InputManager
{

  public partial class RuyiInputEvent : TBase
  {
    private long _EventId;
    private sbyte _DeviceType;
    private int _Key;
    private sbyte _NewValue;
    private sbyte _LastValue;

    public long EventId
    {
      get
      {
        return _EventId;
      }
      set
      {
        __isset.EventId = true;
        this._EventId = value;
      }
    }

    /// <summary>
    /// refer to GlobalInputDefine.enum.RuyiInputDeviceType
    /// </summary>
    public sbyte DeviceType
    {
      get
      {
        return _DeviceType;
      }
      set
      {
        __isset.DeviceType = true;
        this._DeviceType = value;
      }
    }

    /// <summary>
    /// refer to GlobalInputDefine.enum.RuyiControllerKey. Todo: refer to other enums in GlobalInputDefine depends on DeviceType
    /// </summary>
    public int Key
    {
      get
      {
        return _Key;
      }
      set
      {
        __isset.Key = true;
        this._Key = value;
      }
    }

    public sbyte NewValue
    {
      get
      {
        return _NewValue;
      }
      set
      {
        __isset.NewValue = true;
        this._NewValue = value;
      }
    }

    public sbyte LastValue
    {
      get
      {
        return _LastValue;
      }
      set
      {
        __isset.LastValue = true;
        this._LastValue = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool EventId;
      public bool DeviceType;
      public bool Key;
      public bool NewValue;
      public bool LastValue;
    }

    public RuyiInputEvent()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                EventId = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Byte)
              {
                DeviceType = await iprot.ReadByteAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Key = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Byte)
              {
                NewValue = await iprot.ReadByteAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Byte)
              {
                LastValue = await iprot.ReadByteAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("RuyiInputEvent");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.EventId)
        {
          field.Name = "EventId";
          field.Type = TType.I64;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(EventId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.DeviceType)
        {
          field.Name = "DeviceType";
          field.Type = TType.Byte;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteByteAsync(DeviceType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.Key)
        {
          field.Name = "Key";
          field.Type = TType.I32;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Key, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.NewValue)
        {
          field.Name = "NewValue";
          field.Type = TType.Byte;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteByteAsync(NewValue, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.LastValue)
        {
          field.Name = "LastValue";
          field.Type = TType.Byte;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteByteAsync(LastValue, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("RuyiInputEvent(");
      bool __first = true;
      if (__isset.EventId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("EventId: ");
        sb.Append(EventId);
      }
      if (__isset.DeviceType)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DeviceType: ");
        sb.Append(DeviceType);
      }
      if (__isset.Key)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Key: ");
        sb.Append(Key);
      }
      if (__isset.NewValue)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewValue: ");
        sb.Append(NewValue);
      }
      if (__isset.LastValue)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("LastValue: ");
        sb.Append(LastValue);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
