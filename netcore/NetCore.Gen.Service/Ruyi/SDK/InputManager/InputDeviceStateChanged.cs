/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.InputManager
{

  public partial class InputDeviceStateChanged : TBase
  {
    private InputDeviceEventHeader _header;
    private InputDeviceStateChangedX360 _x360;
    private InputDeviceStateChangedGamepad _dgamepad;
    private InputDeviceStateChangedJoystick _djoystick;
    private InputDeviceStateChangedKeyboard _dkeyboard;
    private InputDeviceStateChangedMouse _dmouse;
    private InputDeviceStateChangedRuyiController _ruyicontroller;

    public InputDeviceEventHeader Header
    {
      get
      {
        return _header;
      }
      set
      {
        __isset.header = true;
        this._header = value;
      }
    }

    public InputDeviceStateChangedX360 X360
    {
      get
      {
        return _x360;
      }
      set
      {
        __isset.x360 = true;
        this._x360 = value;
      }
    }

    public InputDeviceStateChangedGamepad Dgamepad
    {
      get
      {
        return _dgamepad;
      }
      set
      {
        __isset.dgamepad = true;
        this._dgamepad = value;
      }
    }

    public InputDeviceStateChangedJoystick Djoystick
    {
      get
      {
        return _djoystick;
      }
      set
      {
        __isset.djoystick = true;
        this._djoystick = value;
      }
    }

    public InputDeviceStateChangedKeyboard Dkeyboard
    {
      get
      {
        return _dkeyboard;
      }
      set
      {
        __isset.dkeyboard = true;
        this._dkeyboard = value;
      }
    }

    public InputDeviceStateChangedMouse Dmouse
    {
      get
      {
        return _dmouse;
      }
      set
      {
        __isset.dmouse = true;
        this._dmouse = value;
      }
    }

    public InputDeviceStateChangedRuyiController Ruyicontroller
    {
      get
      {
        return _ruyicontroller;
      }
      set
      {
        __isset.ruyicontroller = true;
        this._ruyicontroller = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool header;
      public bool x360;
      public bool dgamepad;
      public bool djoystick;
      public bool dkeyboard;
      public bool dmouse;
      public bool ruyicontroller;
    }

    public InputDeviceStateChanged()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Header = new InputDeviceEventHeader();
                await Header.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                X360 = new InputDeviceStateChangedX360();
                await X360.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Dgamepad = new InputDeviceStateChangedGamepad();
                await Dgamepad.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Djoystick = new InputDeviceStateChangedJoystick();
                await Djoystick.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                Dkeyboard = new InputDeviceStateChangedKeyboard();
                await Dkeyboard.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                Dmouse = new InputDeviceStateChangedMouse();
                await Dmouse.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Struct)
              {
                Ruyicontroller = new InputDeviceStateChangedRuyiController();
                await Ruyicontroller.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("InputDeviceStateChanged");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Header != null && __isset.header)
        {
          field.Name = "header";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Header.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (X360 != null && __isset.x360)
        {
          field.Name = "x360";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await X360.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Dgamepad != null && __isset.dgamepad)
        {
          field.Name = "dgamepad";
          field.Type = TType.Struct;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Dgamepad.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Djoystick != null && __isset.djoystick)
        {
          field.Name = "djoystick";
          field.Type = TType.Struct;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Djoystick.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Dkeyboard != null && __isset.dkeyboard)
        {
          field.Name = "dkeyboard";
          field.Type = TType.Struct;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Dkeyboard.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Dmouse != null && __isset.dmouse)
        {
          field.Name = "dmouse";
          field.Type = TType.Struct;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Dmouse.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Ruyicontroller != null && __isset.ruyicontroller)
        {
          field.Name = "ruyicontroller";
          field.Type = TType.Struct;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Ruyicontroller.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("InputDeviceStateChanged(");
      bool __first = true;
      if (Header != null && __isset.header)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Header: ");
        sb.Append(Header== null ? "<null>" : Header.ToString());
      }
      if (X360 != null && __isset.x360)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("X360: ");
        sb.Append(X360== null ? "<null>" : X360.ToString());
      }
      if (Dgamepad != null && __isset.dgamepad)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Dgamepad: ");
        sb.Append(Dgamepad== null ? "<null>" : Dgamepad.ToString());
      }
      if (Djoystick != null && __isset.djoystick)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Djoystick: ");
        sb.Append(Djoystick== null ? "<null>" : Djoystick.ToString());
      }
      if (Dkeyboard != null && __isset.dkeyboard)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Dkeyboard: ");
        sb.Append(Dkeyboard== null ? "<null>" : Dkeyboard.ToString());
      }
      if (Dmouse != null && __isset.dmouse)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Dmouse: ");
        sb.Append(Dmouse== null ? "<null>" : Dmouse.ToString());
      }
      if (Ruyicontroller != null && __isset.ruyicontroller)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ruyicontroller: ");
        sb.Append(Ruyicontroller== null ? "<null>" : Ruyicontroller.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
